#version 460

layout (vertices = 3) out;

in ControlPoint {

	vec4 colour;
	float linearDepth;
	vec3 normals;
	vec2 texCoord;
	vec4 worldPos;

} inControlPoint[];

out ControlPoint {

	vec4 colour;
	float linearDepth;
	vec3 normals;
	vec2 texCoord;
	vec4 worldPos;

} outControlPoint[];

// --------------------------------

// Perlin noise functionality

// Noise parameters (comes from the PerlinModel structure in our C++ code)
layout (std140, binding = 0) uniform PerlinModel {

	uint			N;
	uint			Nmask;
	uint			iTable[256];
	vec2			vTable[256];

} pnModel;


// Perlin noise implementation (this code is essentially a copy of the code in the PerlinNoise c++ class)

vec2 getGradient(uint x, uint y) {

	uint p1 = pnModel.iTable[x & pnModel.Nmask];
	uint p2 = pnModel.iTable[y & pnModel.Nmask];

	return pnModel.vTable[pnModel.iTable[(p1 + p2) & pnModel.Nmask]];
}

// sigmoidal weighting of gradient coefficient t where 0 <= t <= 1
float pnoise_smoothstep(float t) {

	// Interpolation with quintic 6t^5 - 15t^4 + 10t^3
	return t * t * t * (t * (t * 6.0f - 15.0f) + 10.0f);
}

// derivative of sigmoidal function
float pnoise_smoothstep_d1(float t) {
	
	return 30.0f * t * t * (t * (t - 2.0f) + 1.0f);
}

// Get actual noise value and return the derivative in the out parameter dn_dxy
float pnoise(float x, float y, float scale, out vec2 dn_dxy) {

	x *= scale;
	y *= scale;
	
	float x0_ = floor(x);
	float y0_ = floor(y);

	int x0 = int(x0_);
	int y0 = int(y0_);

	float u = x - x0_;
	float v = y - y0_;

	float du_dx = pnoise_smoothstep_d1(u);
	float dv_dy = pnoise_smoothstep_d1(v);

	/*
	x0,y0    x1,y0
	g00      g10
	 +-------+
	 |       |
	 +-------+
	 g01     g11
	 x0,y1   x1,y1
	*/
  
	vec2 g00 = getGradient(x0, y0); //ga
	vec2 g10 = getGradient(x0 + 1, y0); //gb
	vec2 g01 = getGradient(x0, y0 + 1); //gc
	vec2 g11 = getGradient(x0 + 1, y0 + 1); //gd

	// dot product of vectors based on uv with gradients
	// given |g| = 1.0,
	// uv.g = |uv||g|cos(theta) = |uv|cos(theta) 
	float a = u * g00.x + v * g00.y;
	float b = (u - 1.0f) * g10.x + v * g10.y;
	float c = u * g01.x + (v - 1.0f) * g01.y;
	float d = (u - 1.0f) * g11.x + (v - 1.0f) * g11.y;

	u = pnoise_smoothstep(u);
	v = pnoise_smoothstep(v);
	
	// refactor bi-linear interpolation
	float k0 = 1.0f - u - v + u * v;
	float k1 = u - u * v;
	float k2 = v - u * v;
	float k3 = u * v;
  
  // Calculate final noise value
	float actual_noise = a * k0 + b * k1 + c * k2 + d * k3;
	
  // Calculate noise derivative
	dn_dxy.x = g00.x * k0 + g10.x * k1 + g01.x * k2 + g11.x * k3 + du_dx * (b - a + (a - b - c + d) * v);
	dn_dxy.y = g00.y * k0 + g10.y * k1 + g01.y * k2 + g11.y * k3 + dv_dy * (c - a + (a - b - c + d) * u);
  
	return actual_noise;
}

// --------------------------------

//float linearFactor(float dist0, float dist1){
float linearFactor(float d) {

	//linear interp of both dists, give the average in the middle
	//float d = mix(dist0, dist1, 0.5f);

	float minDist = 0.0f;
	float maxDist = 3.0f;

	float scaledDist = (d - minDist) / (maxDist - minDist);
	scaledDist = clamp(scaledDist, 0.0f, 1.0f);

	float tessFactor = mix(1.0f, 30.0f, 1.0f - scaledDist);

	return tessFactor;
}

void main(void) {

	//Pass-through control points

	outControlPoint[gl_InvocationID].linearDepth = inControlPoint[gl_InvocationID].linearDepth;
	outControlPoint[gl_InvocationID].worldPos = inControlPoint[gl_InvocationID].worldPos;
	outControlPoint[gl_InvocationID].normals = inControlPoint[gl_InvocationID].normals;
	outControlPoint[gl_InvocationID].colour = inControlPoint[gl_InvocationID].colour;
	outControlPoint[gl_InvocationID].texCoord = inControlPoint[gl_InvocationID].texCoord;

	gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;

	//Set Tessellation Factors

	//float d0 = inControlPoint[0].linearDepth;
	//float d1 = inControlPoint[1].linearDepth;
	//float d2 = inControlPoint[2].linearDepth;

	float d0 = length(gl_in[0].gl_Position);
	float d1 = length(gl_in[1].gl_Position);
	float d2 = length(gl_in[2].gl_Position);

	gl_TessLevelOuter[0] = linearFactor(mix(d0, d1, 0.5f));
	gl_TessLevelOuter[1] = linearFactor(mix(d1, d2, 0.5f));
	gl_TessLevelOuter[2] = linearFactor(mix(d2, d0, 0.5f));

	gl_TessLevelInner[0] = linearFactor((d0 + d1 + d2) / 3.0f);
	
}	