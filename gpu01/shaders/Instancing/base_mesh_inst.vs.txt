#version 460

uniform mat4 viewMatrix;
uniform mat4 projMatrix;
uniform float near;
uniform float far;


struct MeshInstance {

	vec4 pos;
	vec3 scale;
};

layout (std430, binding = 0) buffer InstanceBlock {

	MeshInstance instance[];
};


layout (location=0) in vec3 vertexPos;
layout (location=2) in vec3 vertexNormal;
layout (location=3) in vec3 vertexTexCoord;


out VSPacket {

	vec4 posW;
	vec3 normalW;
	float linearDepth;
	vec2 textureCoord;

} outputVertex;


void main(void) {

	// Build translation matrix
	mat4 T = mat4(
		
		vec4(1.0f, 0.0f, 0.0f, 0.0f),
		vec4(0.0f, 1.0f, 0.0f, 0.0f),
		vec4(0.0f, 0.0f, 1.0f, 0.0f),
		instance[gl_InstanceID].pos
	);

	// Build scale matrix
	float sx = instance[gl_InstanceID].scale.x;
	float sy = instance[gl_InstanceID].scale.y;
	float sz = instance[gl_InstanceID].scale.z;

	mat4 S = mat4(
	
		vec4(sx,   0.0f, 0.0f, 0.0f),
		vec4(0.0f, sy  , 0.0f, 0.0f),
		vec4(0.0f, 0.0f, sz,   0.0f),
		vec4(0.0f, 0.0f, 0.0f, 1.0f)
	);

	// Build model transform and inverse transpose
	mat4 modelMatrix = T * S;
	mat4 invTranspose = transpose(inverse(modelMatrix));

	// Setup output coordinates
	vec4 posW = modelMatrix * vec4(vertexPos, 1.0f);
	vec4 posE = viewMatrix * posW;

	// Setup output vertex
	outputVertex.posW = posW;
	outputVertex.normalW = (invTranspose * vec4(vertexNormal, 0.0f)).xyz;
	outputVertex.linearDepth = (-posE.z - near) / (far - near);
	outputVertex.textureCoord = vertexTexCoord.xy;

	// Setup gl_Position for next pipeline stage...
	gl_Position = projMatrix * posE;
}
