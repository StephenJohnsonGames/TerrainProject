#version 460

uniform mat4 mvpMatrix;
uniform int random;
uniform float deltaTime;

layout (points) in;
layout (line_strip, max_vertices = 6) out;

layout (std430, binding = 0) buffer random_array {

	float rnd[1];
};

//input

in VSOutput{

	vec4 colour;
	float height;

} inputVertex[];

//output

out GSOutput {

	vec4 colour;

} outputVertex;


void main(void){

	float vx = mix(-0.3f, 0.3f, rnd[random % 1]);
	float vy = mix(-0.2f, -0.7f, rnd[random % 1]);

	vec4 velocity = vec4(vx, vy, 0.0f, 1.0f);

	gl_Position = mvpMatrix * gl_in[0].gl_Position;
	outputVertex.colour = inputVertex[0].colour;
	EmitVertex();

	vec4 centre = gl_in[0].gl_Position;
	vec4 p0 = vec4(centre.x, centre.y, centre.z, 1.0f);
	vec4 p1 = p0 + velocity;
	vec4 p2 = p1 + velocity;
	vec4 p3 = p2 + velocity;
	vec4 p4 = p3 + velocity;

	

	gl_Position = mvpMatrix * (p0 + velocity);
	EmitVertex();

	gl_Position = mvpMatrix * (p1 + velocity);
	EmitVertex();

	gl_Position = mvpMatrix * (p2 + velocity);
	EmitVertex();

	gl_Position = mvpMatrix * (p3 + velocity);
	EmitVertex();

	gl_Position = mvpMatrix * (p4 + velocity);
	EmitVertex();


}